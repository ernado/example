// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/ernado/example"
)

// Ensure, that DBMock does implement example.DB.
// If this is not the case, regenerate this file with moq.
var _ example.DB = &DBMock{}

// DBMock is a mock implementation of example.DB.
//
//	func TestSomethingThatUsesDB(t *testing.T) {
//
//		// make and configure a mocked example.DB
//		mockedDB := &DBMock{
//			CreateTaskFunc: func(ctx context.Context, title string) (*example.Task, error) {
//				panic("mock out the CreateTask method")
//			},
//			DeleteTaskFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteTask method")
//			},
//			GenerateErrorFunc: func(ctx context.Context) error {
//				panic("mock out the GenerateError method")
//			},
//			ListTasksFunc: func(ctx context.Context) ([]*example.Task, error) {
//				panic("mock out the ListTasks method")
//			},
//		}
//
//		// use mockedDB in code that requires example.DB
//		// and then make assertions.
//
//	}
type DBMock struct {
	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, title string) (*example.Task, error)

	// DeleteTaskFunc mocks the DeleteTask method.
	DeleteTaskFunc func(ctx context.Context, id int64) error

	// GenerateErrorFunc mocks the GenerateError method.
	GenerateErrorFunc func(ctx context.Context) error

	// ListTasksFunc mocks the ListTasks method.
	ListTasksFunc func(ctx context.Context) ([]*example.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
		}
		// DeleteTask holds details about calls to the DeleteTask method.
		DeleteTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GenerateError holds details about calls to the GenerateError method.
		GenerateError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListTasks holds details about calls to the ListTasks method.
		ListTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreateTask    sync.RWMutex
	lockDeleteTask    sync.RWMutex
	lockGenerateError sync.RWMutex
	lockListTasks     sync.RWMutex
}

// CreateTask calls CreateTaskFunc.
func (mock *DBMock) CreateTask(ctx context.Context, title string) (*example.Task, error) {
	if mock.CreateTaskFunc == nil {
		panic("DBMock.CreateTaskFunc: method is nil but DB.CreateTask was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
	}{
		Ctx:   ctx,
		Title: title,
	}
	mock.lockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	mock.lockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, title)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//
//	len(mockedDB.CreateTaskCalls())
func (mock *DBMock) CreateTaskCalls() []struct {
	Ctx   context.Context
	Title string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
	}
	mock.lockCreateTask.RLock()
	calls = mock.calls.CreateTask
	mock.lockCreateTask.RUnlock()
	return calls
}

// DeleteTask calls DeleteTaskFunc.
func (mock *DBMock) DeleteTask(ctx context.Context, id int64) error {
	if mock.DeleteTaskFunc == nil {
		panic("DBMock.DeleteTaskFunc: method is nil but DB.DeleteTask was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteTask.Lock()
	mock.calls.DeleteTask = append(mock.calls.DeleteTask, callInfo)
	mock.lockDeleteTask.Unlock()
	return mock.DeleteTaskFunc(ctx, id)
}

// DeleteTaskCalls gets all the calls that were made to DeleteTask.
// Check the length with:
//
//	len(mockedDB.DeleteTaskCalls())
func (mock *DBMock) DeleteTaskCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteTask.RLock()
	calls = mock.calls.DeleteTask
	mock.lockDeleteTask.RUnlock()
	return calls
}

// GenerateError calls GenerateErrorFunc.
func (mock *DBMock) GenerateError(ctx context.Context) error {
	if mock.GenerateErrorFunc == nil {
		panic("DBMock.GenerateErrorFunc: method is nil but DB.GenerateError was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGenerateError.Lock()
	mock.calls.GenerateError = append(mock.calls.GenerateError, callInfo)
	mock.lockGenerateError.Unlock()
	return mock.GenerateErrorFunc(ctx)
}

// GenerateErrorCalls gets all the calls that were made to GenerateError.
// Check the length with:
//
//	len(mockedDB.GenerateErrorCalls())
func (mock *DBMock) GenerateErrorCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGenerateError.RLock()
	calls = mock.calls.GenerateError
	mock.lockGenerateError.RUnlock()
	return calls
}

// ListTasks calls ListTasksFunc.
func (mock *DBMock) ListTasks(ctx context.Context) ([]*example.Task, error) {
	if mock.ListTasksFunc == nil {
		panic("DBMock.ListTasksFunc: method is nil but DB.ListTasks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListTasks.Lock()
	mock.calls.ListTasks = append(mock.calls.ListTasks, callInfo)
	mock.lockListTasks.Unlock()
	return mock.ListTasksFunc(ctx)
}

// ListTasksCalls gets all the calls that were made to ListTasks.
// Check the length with:
//
//	len(mockedDB.ListTasksCalls())
func (mock *DBMock) ListTasksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListTasks.RLock()
	calls = mock.calls.ListTasks
	mock.lockListTasks.RUnlock()
	return calls
}
