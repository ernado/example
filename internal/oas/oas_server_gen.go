// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateTask implements createTask operation.
	//
	// Create a new task with the provided title.
	//
	// POST /tasks
	CreateTask(ctx context.Context, req *CreateTaskRequest) (*Task, error)
	// DeleteTask implements deleteTask operation.
	//
	// Delete a task by its unique identifier.
	//
	// DELETE /tasks/{id}
	DeleteTask(ctx context.Context, params DeleteTaskParams) (DeleteTaskRes, error)
	// GenerateError implements generateError operation.
	//
	// Utility endpoint for testing error handling - always returns an error response.
	//
	// POST /tasks/error
	GenerateError(ctx context.Context) (*Error, error)
	// GetHealth implements getHealth operation.
	//
	// Get health.
	//
	// GET /health
	GetHealth(ctx context.Context) (*Health, error)
	// ListTasks implements listTasks operation.
	//
	// Retrieve a list of all tasks in the system.
	//
	// GET /tasks
	ListTasks(ctx context.Context) (*TaskList, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
