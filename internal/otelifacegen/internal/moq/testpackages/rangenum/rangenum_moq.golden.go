// Code generated by moq; DO NOT EDIT.
// github.com/ernado/example/internal/otelifacegen

package rangenum

import (
	"sync"
)

// Ensure, that MagicianMock does implement Magician.
// If this is not the case, regenerate this file with moq.
var _ Magician = &MagicianMock{}

// MagicianMock is a mock implementation of Magician.
//
//	func TestSomethingThatUsesMagician(t *testing.T) {
//
//		// make and configure a mocked Magician
//		mockedMagician := &MagicianMock{
//			DoMagicFunc: func()  {
//				panic("mock out the DoMagic method")
//			},
//		}
//
//		// use mockedMagician in code that requires Magician
//		// and then make assertions.
//
//	}
type MagicianMock struct {
	// DoMagicFunc mocks the DoMagic method.
	DoMagicFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// DoMagic holds details about calls to the DoMagic method.
		DoMagic []struct {
		}
	}
	lockDoMagic sync.RWMutex
}

// DoMagic calls DoMagicFunc.
func (mock *MagicianMock) DoMagic() {
	if mock.DoMagicFunc == nil {
		panic("MagicianMock.DoMagicFunc: method is nil but Magician.DoMagic was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDoMagic.Lock()
	mock.calls.DoMagic = append(mock.calls.DoMagic, callInfo)
	mock.lockDoMagic.Unlock()
	mock.DoMagicFunc()
}

// DoMagicCalls gets all the calls that were made to DoMagic.
// Check the length with:
//
//	len(mockedMagician.DoMagicCalls())
func (mock *MagicianMock) DoMagicCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDoMagic.RLock()
	calls = mock.calls.DoMagic
	mock.lockDoMagic.RUnlock()
	return calls
}
